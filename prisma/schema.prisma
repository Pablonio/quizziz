// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id          Int         @id @default(autoincrement())
  userName    String
  correo      String      @unique
  contrasena  String
  rol         String      @default("Estudiante")
  examenesEstudiantes ExamenesEstudiantes[]
  examenes    Examen[]
}

model Examen {
  id                Int                @id @default(autoincrement())
  nombreExamen      String
  usuarioId         Int
  usuario           Usuario            @relation(fields: [usuarioId], references: [id])
  preguntas         Pregunta[]
  examenesEstudiantes ExamenesEstudiantes[]
  estado            String
}

model Pregunta {
  id                Int                 @id @default(autoincrement())
  pregunta          String
  examenId          Int
  examen            Examen    @relation(fields: [examenId], references: [id])
  respuestas        Respuesta[]
  examenesEstudiantes ExamenesEstudiantes[]  // Relaci√≥n inversa
}

model Respuesta {
  id                Int                @id @default(autoincrement())
  respuesta         String
  puntucion         Int
  preguntaId        Int
  pregunta          Pregunta           @relation(fields: [preguntaId], references: [id])
  correcta          Boolean   
  examenesEstudiantes ExamenesEstudiantes[]  
}



model ExamenesEstudiantes {
  id                Int                @id @default(autoincrement())
  examenId          Int
  estudianteId      Int
  Usuario           Usuario            @relation(fields: [estudianteId], references: [id])
  examen            Examen   @relation(fields: [examenId], references: [id])
  respuestaId       Int
  respuestas        Respuesta          @relation(fields: [respuestaId], references: [id])
  examenesEstudiantes NotaFinal[]  
  preguntaId        Int
  pregunta          Pregunta           @relation(fields: [preguntaId], references: [id])

}

model NotaFinal {
  id                Int                @id @default(autoincrement())
  puntajeTotal      Float  
  examenEstudianteId Int
  examenEstudiante  ExamenesEstudiantes   @relation(fields: [examenEstudianteId], references: [id])
}

